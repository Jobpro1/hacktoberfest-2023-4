Given a gold mine called M of (n x m) dimensions. Each field in this mine contains a positive integer which is the amount of gold in tons. Initially the miner can start from any row in the first column. From a given cell, the miner can move

to the cell diagonally up towards the right 
to the right
to the cell diagonally down towards the right
Find out maximum amount of gold which he can collect.


Example 1:

Input: n = 3, m = 3
M = {{1, 3, 3},
     {2, 1, 4},
     {0, 6, 4}};
Output: 12
Explaination: 
The path is {(1,0) -> (2,1) -> (2,2)}.



def maxGoldCollection(n, m, M):
    dp = [[0 for _ in range(m)] for _ in range(n)]

    # Initialize the last column of the dynamic programming table.
    for i in range(n):
        dp[i][m - 1] = M[i][m - 1]

    # Start from the second last column and work your way leftwards.
    for j in range(m - 2, -1, -1):
        for i in range(n):
            # Calculate the maximum gold collected from the cell (i, j) by considering three possible moves.
            right = dp[i][j + 1]
            up_right = dp[i - 1][j + 1] if i > 0 else 0
            down_right = dp[i + 1][j + 1] if i < n - 1 else 0

            dp[i][j] = M[i][j] + max(right, up_right, down_right)

    # Find the maximum value in the first column (starting positions).
    max_gold = 0
    for i in range(n):
        max_gold = max(max_gold, dp[i][0])

    return max_gold

# Example usage
n = 3
m = 3
M = [[1, 3, 3], [2, 1, 4], [0, 6, 4]]
result = maxGoldCollection(n, m, M)
print(result)  # Output: 12
